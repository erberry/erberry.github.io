<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 刘玮的博客</title>
    <link>https://erberry.github.io/categories/go/</link>
    <description>Recent content in Go on 刘玮的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 12 Feb 2022 20:11:05 +0800</lastBuildDate><atom:link href="https://erberry.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>记一次goroutine被hang的排查经历</title>
      <link>https://erberry.github.io/post/go-hang-panic/</link>
      <pubDate>Sat, 12 Feb 2022 20:11:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-hang-panic/</guid>
      <description>介绍 首先介绍下标题中的两个名词：panic和hang Go语言中的panic可以类比与其他语言的Exception（异常），上一篇文章Pani</description>
    </item>
    
    <item>
      <title>最接地气的Go服务优化指南</title>
      <link>https://erberry.github.io/post/go-perf/</link>
      <pubDate>Sat, 12 Feb 2022 20:10:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-perf/</guid>
      <description>一、压测 1. 单接口压测 固定QPS压测 用于排查新功能对接口的影响 极限QPS压测 用于摸排接口最大承载QPS 2. 全链路压测 3. benchmark 用于代码层面方法的压测，</description>
    </item>
    
    <item>
      <title>Go代码调用链路可视化工具—go-callvis</title>
      <link>https://erberry.github.io/post/go-callvis/</link>
      <pubDate>Sat, 12 Feb 2022 20:09:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-callvis/</guid>
      <description>WHAT（Go代码调用链路可视化工具是什么？） 与链路追踪（Tracing）不同，Tracing关注复杂的分布式环境中各个服务节点间的调用关系</description>
    </item>
    
    <item>
      <title>Panic的一生</title>
      <link>https://erberry.github.io/post/go-panic/</link>
      <pubDate>Sat, 12 Feb 2022 20:08:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-panic/</guid>
      <description>一、panic概述 异常 异常在一些其他语言中，如c++、java，被叫做Exception，主要由抛出异常和捕获异常两部分组成。 异常在go语言</description>
    </item>
    
    <item>
      <title>Why generics in Go？How？</title>
      <link>https://erberry.github.io/post/go-why-generics/</link>
      <pubDate>Sat, 12 Feb 2022 20:07:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-why-generics/</guid>
      <description>以下全文大部分翻译自go官方blog： Why Generics?。但是由于原文的泛型示例已经过时，所以译者在 最新的泛型示例 章节中尽量使用新的泛型语</description>
    </item>
    
    <item>
      <title>Go1.17，为什么性能可以提升5%</title>
      <link>https://erberry.github.io/post/go-version117-1/</link>
      <pubDate>Sat, 12 Feb 2022 20:06:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-version117-1/</guid>
      <description>go1.17发布blog中有这么一段描述本次大版本更新带来的性能普遍提升： This release brings additional improvements to the compiler, namely a new way of passing function arguments and results. This change has shown about a 5% performance improvement in Go programs and reduction in</description>
    </item>
    
    <item>
      <title>sync.Pool源码解析</title>
      <link>https://erberry.github.io/post/go-sync-pool/</link>
      <pubDate>Sat, 12 Feb 2022 20:06:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-sync-pool/</guid>
      <description>简介 sync.Pool是go官方提供的多线程安全的对象缓存池。目的是达到内存复用，减少内存分配及gc带来的消耗。 官方fmt包就使用了sync</description>
    </item>
    
    <item>
      <title>Go语言内置的goroutine池</title>
      <link>https://erberry.github.io/post/goroutine-pool/</link>
      <pubDate>Sat, 12 Feb 2022 20:05:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/goroutine-pool/</guid>
      <description>相信每个用go写的项目都会搞一个go的协程池包，不论是自己写的还是借鉴开源代码。和其他语言编程中经常提到的线程池一样，协程池同样是通过协程复</description>
    </item>
    
    <item>
      <title>Go1.17发布</title>
      <link>https://erberry.github.io/post/go-version117/</link>
      <pubDate>Sat, 12 Feb 2022 20:04:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-version117/</guid>
      <description>go1.17版本在8月16号发布了，新增的功能和变更如下： 官方发布blog地址 1. 编译优化 go1.17将使用栈传递参数和返回值替换为使用寄存器</description>
    </item>
    
    <item>
      <title>go源码解析之TCP连接（七）——IO多路复用之事件通知</title>
      <link>https://erberry.github.io/post/go-tcp7/</link>
      <pubDate>Sat, 12 Feb 2022 20:03:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-tcp7/</guid>
      <description>go源码解析之TCP连接系列基于go源码1.16.5 TCP连接中的IO多路复用 上一章已经介绍了将socket注册到epoll中的过程，本章将</description>
    </item>
    
    <item>
      <title>go源码解析之TCP连接（六）——IO多路复用之事件注册</title>
      <link>https://erberry.github.io/post/go-tcp6/</link>
      <pubDate>Sat, 12 Feb 2022 20:02:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-tcp6/</guid>
      <description>go源码解析之TCP连接系列基于go源码1.16.5 TCP连接中的IO多路复用 本章将介绍golang在tcp连接中的IO多路复用的实现 1. 背景</description>
    </item>
    
    <item>
      <title>go源码解析之TCP连接（五）——Close</title>
      <link>https://erberry.github.io/post/go-tcp5/</link>
      <pubDate>Sat, 12 Feb 2022 20:01:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-tcp5/</guid>
      <description>go源码解析之TCP连接系列基于go源码1.16.5 连接关闭 上一章我们通过跟踪TCPConn的Write方法，了解了发送数据的过程以及fd的</description>
    </item>
    
    <item>
      <title>go源码解析之TCP连接（四）——Write</title>
      <link>https://erberry.github.io/post/go-tcp4/</link>
      <pubDate>Sat, 12 Feb 2022 20:00:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-tcp4/</guid>
      <description>go源码解析之TCP连接系列基于go源码1.16.5 网络数据发送 上一章我们通过跟踪TCPConn的Read方法，了解了读取数据的过程，本章将</description>
    </item>
    
    <item>
      <title>go源码解析之TCP连接（三）——Read</title>
      <link>https://erberry.github.io/post/go-tcp3/</link>
      <pubDate>Sat, 12 Feb 2022 19:59:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-tcp3/</guid>
      <description>go源码解析之TCP连接系列基于go源码1.16.5 网络数据接收 上一章我们通过跟踪TCPListener的Accept方法，了解了serve</description>
    </item>
    
    <item>
      <title>go源码解析之TCP连接（二）——Accept</title>
      <link>https://erberry.github.io/post/go-tcp2/</link>
      <pubDate>Sat, 12 Feb 2022 19:58:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-tcp2/</guid>
      <description>go源码解析之TCP连接系列基于go源码1.16.5 连接是如何建立的 上一章我们通过跟踪net.Listen的调用，了解了socket的创建、</description>
    </item>
    
    <item>
      <title>go源码解析之TCP连接（一）——Listen</title>
      <link>https://erberry.github.io/post/go-tcp1/</link>
      <pubDate>Sat, 12 Feb 2022 19:57:05 +0800</pubDate>
      
      <guid>https://erberry.github.io/post/go-tcp1/</guid>
      <description>go源码解析之TCP连接系列基于go源码1.16.5 端口是如何监听的 首先奉上net文档中第一个映入眼帘的example 1 2 3 4 5 6 7 8 9 10 11</description>
    </item>
    
  </channel>
</rss>
